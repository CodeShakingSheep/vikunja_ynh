#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
backend_path=$(ynh_app_setting_get --app=$app --key=backend_path)
port=$(ynh_app_setting_get --app=$app --key=port)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
timezone="$(cat /etc/timezone)"
secret=$(ynh_string_random --length=32)

set_motd=$(ynh_app_setting_get --app=$app --key=set_motd)
enable_registration=$(ynh_app_setting_get --app=$app --key=enable_registration)
enable_linksharing=$(ynh_app_setting_get --app=$app --key=enable_linksharing)
enable_taskattachments=$(ynh_app_setting_get --app=$app --key=enable_taskattachments)
enable_taskcomments=$(ynh_app_setting_get --app=$app --key=enable_taskcomments)
enable_emailreminders=$(ynh_app_setting_get --app=$app --key=enable_emailreminders)
enable_userdeletion=$(ynh_app_setting_get --app=$app --key=enable_userdeletion)
maxavatarsize=$(ynh_app_setting_get --app=$app --key=maxavatarsize)
maxitemsperpage=$(ynh_app_setting_get --app=$app --key=maxitemsperpage)


#=================================================
# CHECK VERSION
#=================================================

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up $app before upgrading (may take a while)..." --weight=4

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

# If backend_path doesn't exist, create it
if [ -z "$backend_path" ]; then
	backend_path=/opt/$app
	ynh_app_setting_set --app=$app --key=backend_path --value=$backend_path
fi

if [ -z "$set_motd" ]; then
	set_motd=""
	ynh_app_setting_set --app=$app --key=set_motd --value=$set_motd
fi

if [ -z "$enable_registration" ]; then
	enable_registration="true"
	ynh_app_setting_set --app=$app --key=enable_registration --value=$enable_registration
fi

if [ -z "$enable_linksharing" ]; then
	enable_linksharing="true"
	ynh_app_setting_set --app=$app --key=enable_linksharing --value=$enable_linksharing
fi

if [ -z "$enable_taskattachments" ]; then
	enable_taskattachments="true"
	ynh_app_setting_set --app=$app --key=enable_taskattachments --value=$enable_taskattachments
fi

if [ -z "$enable_taskcomments" ]; then
	enable_taskcomments="true"
	ynh_app_setting_set --app=$app --key=enable_taskcomments --value=$enable_taskcomments
fi

if [ -z "$enable_emailreminders" ]; then
	enable_emailreminders="true"
	ynh_app_setting_set --app=$app --key=enable_emailreminders --value=$enable_emailreminders
fi

if [ -z "$enable_userdeletion" ]; then
	enable_userdeletion="true"
	ynh_app_setting_set --app=$app --key=enable_userdeletion --value=$enable_userdeletion
fi

if [ -z "$maxavatarsize" ]; then
	maxavatarsize=1024
	ynh_app_setting_set --app=$app --key=maxavatarsize --value=$maxavatarsize
fi

if [ -z "$maxitemsperpage" ]; then
	maxitemsperpage=50
	ynh_app_setting_set --app=$app --key=maxitemsperpage --value=$maxitemsperpage
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# Create a permission if needed
if ! ynh_permission_exists --permission="api"; then
	ynh_permission_create --permission="api" --url="/api" --allowed="visitors" --auth_header="false" --show_tile="false" --protected="true"
fi

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action=stop --log_path=systemd

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir="$final_path"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=5

	# Download, check integrity, uncompress and patch the source from app.src
	# Frontend
	ynh_setup_source --dest_dir="$final_path" --source_id="front"
	
	# Backend
	mkdir -p "$backend_path/files"
	tempdir="$(mktemp -d)"
	ynh_setup_source --dest_dir=$tempdir --source_id=$YNH_ARCH
	back="$(find $tempdir -name "vikunja-*" \! -name "*.sha256")"
	cp "$back" "$backend_path/vikunja"
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"
chmod +x "$backend_path/vikunja"
chown -R $app:www-data "$backend_path/files"

#=================================================
# UPGRADE A CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading a configuration file..." --weight=1

redis_db=$(ynh_redis_get_free_db)
ynh_add_config --template="../conf/config.yml" --destination="$backend_path/config.yml"

chmod 400 "$backend_path/config.yml"
chown $app:$app "$backend_path/config.yml"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..." --weight=2

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..." --weight=10

ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Configuring a systemd service..." --weight=2

ynh_add_systemd_config

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --description="Self-hosted To-Do list application" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name=$app --action=start --log_path=systemd --line_match="server started on"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..." --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
